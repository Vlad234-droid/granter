{"version":3,"sources":["core/services/deleteCompany.js","pages/ProfilePage/Company/index.js","pages/ProfilePage/index.js"],"names":["deleteCompany","companyId","a","token","lockr","get","fetch","process","method","headers","Accept","Authorization","deleteComp","json","res","success","Error","antIcon","LoadingOutlined","style","fontSize","spin","Dragger","Upload","Company","company","updateCompany","setCompaniesList","useState","companyLogo","setCompanyLogo","editMode","setEditMode","loader","setLoader","logoLoader","setLogoLoader","Form","useForm","companyForm","companies","useSelector","state","user","isDropDownDelete","setIsDropDownDelete","loaderDelBtn","setLoaderDelBtn","useEffect","cleanupFunction","setFieldsValue","number","accountant_email","revenue","utr","sme_or_rdec","avatar","updateLogo","e","postCompanyLogo","id","file","then","data","onSuccess","menu","className","type","onClick","prev","loading","notification","description","filter","item","name","length","overlay","placement","trigger","visible","onVisibleChange","getPopupContainer","document","getElementById","form","onFinish","postCompanyData","Item","rules","required","message","manager","phone","customRequest","showUploadList","accept","indicator","title","src","alt","iconUpload","submit","ProfilePage","userData","setUserData","editModeGeneral","setEditModeGeneral","profileFormLoader","setProfileFormLoader","companiesList","profileForm","dispatch","useDispatch","registrationChangeEstimate","bindActionCreators","actions","fetchProfileData","profile","team_role","address","enable_notifications","fetchUserCompanies","userCompaniesLoaded","result","map","Layout","postProfileData","max","href","preventDefault","email","to","active","key"],"mappings":"0WAGaA,EAAa,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,sEAEnBC,EAAQC,IAAMC,IAAI,YAFC,SAIAC,MAAM,GAAD,OANJC,yCAMI,mCAAgDN,GAAa,CACzFO,OAAQ,SACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,mBACRC,cAAc,UAAD,OAAYR,MATJ,cAInBS,EAJmB,gBAYPA,EAAWC,OAZJ,YAYnBC,EAZmB,QAajBC,QAbiB,0CAaDD,GAbC,gEAenB,IAAIE,MAAJ,MAfmB,0DAAH,sDCOpBC,G,OAAU,kBAACC,EAAA,EAAD,CAAiBC,MAAO,CAAEC,SAAU,IAAMC,MAAI,KAEtDC,EAAYC,IAAZD,QAgSOE,EA/RC,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,cAAeC,EAAuB,EAAvBA,iBACzC,EAAsCC,mBAAS,MAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgCF,oBAAS,GAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA4BJ,oBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KACA,EAAsBC,IAAKC,UAApBC,EAAP,oBACMC,EAAYC,aAAY,SAACC,GAAD,OAAWA,EAAMC,KAAKH,aACpD,EAAgDZ,oBAAS,GAAzD,mBAAOgB,EAAP,KAAyBC,EAAzB,KACA,EAAwCjB,oBAAS,GAAjD,mBAAOkB,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACR,IAAIC,GAAkB,EAWtB,OATAV,EAAYW,eAAe,CACzBC,OAAQ1B,EAAQ0B,OAChBC,iBAAkB3B,EAAQ2B,iBAC1BC,QAAS5B,EAAQ4B,QACjBC,IAAK7B,EAAQ6B,IACbC,YAAa9B,EAAQ8B,cAElBN,GAAiBnB,EAAeL,EAAQ+B,QAEtC,kBAAOP,GAAkB,KAC/B,CAACxB,EAASc,IAEb,IASMkB,EAAa,SAACC,GAClBtB,GAAc,GACduB,YAAgBlC,EAAQmC,GAAIF,EAAEG,MAAMC,MAAK,SAACC,GACxC3B,GAAc,GACdN,EAAeiC,EAAKP,WAEtBE,EAAEM,UAAU,OAiBRC,EACJ,yBAAKC,UAAU,oBACb,oIACA,yBAAKA,UAAU,2BACb,kBAAC,IAAD,CACEC,KAAK,SACLC,QAAS,WACPvB,GAAoB,SAACwB,GAAD,OAAWA,OAHnC,QAOA,kBAAC,IAAD,CAAQF,KAAK,UAAUD,UAAU,cAAcI,QAASxB,EAAcsB,QAzB/C,WAC3BrB,GAAgB,kBAAM,KACtB/C,EAAa,OAACyB,QAAD,IAACA,OAAD,EAACA,EAASmC,IAAIE,MAAK,SAACC,GAC3BA,EAAKhD,UACPgC,GAAgB,kBAAM,KACtBwB,IAAaxD,QAAQ,CACnByD,YAAa,qCAEf3B,GAAoB,SAACwB,GAAD,OAAWA,KAC/B1C,GAAiB,SAAC0C,GAAD,OAAUA,EAAKI,QAAO,SAACC,GAAD,OAAUA,EAAKd,MAAL,OAAYnC,QAAZ,IAAYA,OAAZ,EAAYA,EAASmC,gBAgBtE,YAON,OACE,wBAAIM,UAAS,2BAAsBtB,EAAmB,cAAgB,KACpE,yBAAKsB,UAAU,0BACb,4BACE,8BAAOzC,EAAQkD,OAEjB,yBAAKT,UAAU,uBAAuBN,GAAG,YACrC7B,GACA,oCACE,4BACEmC,UAAU,oBACVE,QAAS,SAACV,GACR1B,GAAY,KAEd,kBAAC,IAAD,OAEoB,IAArBQ,EAAUoC,QACT,oCACE,kBAAC,IAAD,CACEC,QAASZ,EACTa,UAAU,cACVC,QAAQ,QACRC,QAASpC,EACTqC,gBAAiB,WACXrC,GAAkBC,GAAoB,SAACwB,GAAD,OAAWA,MAEvDa,kBAAmB,kBAAMC,SAASC,eAAe,aACjD,4BACEhB,QAAS,WACPvB,GAAoB,SAACwB,GAAD,OAAWA,MAEjCH,UAAU,uBACV,kBAAC,IAAD,YAShB,kBAAC,IAAD,CAAMmB,KAAM9C,EAAa+C,SA3Fd,SAACD,GACdnD,GAAU,GACVqD,YAAgB9D,EAAQmC,GAAIyB,GAAMvB,MAAK,SAACC,GACtC7B,GAAU,GACVF,GAAY,GACZN,EAAcqC,QAuFZ,6BAASG,UAAU,4BACjB,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,SAAf,qBACA,yBAAKA,UAAU,WACXnC,EAGA,kBAAC,IAAKyD,KAAN,CACEb,KAAK,SACLc,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,kCAGb,kBAAC,IAAD,OAVF,8BAAOlE,EAAQ0B,UAerB,yBAAKe,UAAU,gBACb,yBAAKA,UAAU,SAAf,oBACA,yBAAKA,UAAU,WACXnC,EAGA,kBAAC,IAAKyD,KAAN,CACEb,KAAK,mBACLc,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,+BAEX,CACExB,KAAM,QACNwB,QAAS,uCAGb,kBAAC,IAAD,OAdF,8BAAOlE,EAAQ2B,oBAmBrB,yBAAKc,UAAU,gBACb,yBAAKA,UAAU,SAAf,WACA,yBAAKA,UAAU,WACXnC,EAGA,kBAAC,IAAKyD,KAAN,CACEb,KAAK,UACLc,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,2BAGb,kBAAC,IAAD,OAVF,8BAAOlE,EAAQ4B,WAerB,yBAAKa,UAAU,gBACb,yBAAKA,UAAU,SAAf,OACA,yBAAKA,UAAU,WACXnC,EAGA,kBAAC,IAAKyD,KAAN,CACEb,KAAK,MACLc,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,uBAGb,kBAAC,IAAD,OAVF,8BAAOlE,EAAQ6B,OAerB,yBAAKY,UAAU,gBACb,yBAAKA,UAAU,SAAf,eACA,yBAAKA,UAAU,WACXnC,EAGA,kBAAC,IAAKyD,KAAN,CACEb,KAAK,cACLc,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,+BAGb,kBAAC,IAAD,OAVF,8BAAOlE,EAAQ8B,eAerB,yBAAKW,UAAU,gBACb,yBAAKA,UAAU,SAAf,uBACA,yBAAKA,UAAU,WACZzC,EAAQmE,SACP,oCACE,0BAAM1B,UAAU,WAAWzC,EAAQmE,QAAQjB,KAA3C,KAAyD,IACzD,0BAAMT,UAAU,WAAWzC,EAAQmE,QAAQC,UAKnD,yBAAK3B,UAAU,gBACb,yBAAKA,UAAU,SAAf,gBACA,yBAAKA,UAAU,WACZrC,EACC,yBAAKqC,UAAU,iBACb,kBAAC5C,EAAD,CAASwE,cAAerC,EAAYsC,gBAAgB,EAAOC,OAAO,oCAC/D7D,GACC,yBAAK+B,UAAU,kBACb,kBAAC,IAAD,CAAM+B,UAAWhF,KAGrB,kBAAC,IAAD,CAAS6D,UAAU,MAAMoB,MAAM,sBAC7B,yBAAKC,IAAKtE,EAAauE,IAAKvE,OAKlC,kBAACP,EAAD,CAASwE,cAAerC,EAAYsC,gBAAgB,EAAOC,OAAO,oCAC/D7D,GACC,yBAAK+B,UAAU,kBACb,kBAAC,IAAD,CAAM+B,UAAWhF,KAGrB,kBAAC,IAAD,CAAS6D,UAAU,MAAMoB,MAAM,sBAC7B,yBAAKhC,UAAU,gBACb,yBAAKiC,IAAKE,IAAYD,IAAI,KAC1B,oDASfrE,GACC,yBAAKmC,UAAU,4BACb,kBAAC,IAAD,CACEC,KAAK,SACLG,QAASrC,EACTmC,QAAS,SAACV,GACR1B,GAAY,KAJhB,UAQA,kBAAC,IAAD,CACEmC,KAAK,UACLG,QAASrC,EACTmC,QAAS,SAACV,GACRnB,EAAY+D,WAJhB,W,yBCnBKC,UA/PK,WAClB,MAAgC3E,mBAAS,MAAzC,mBAAO4E,EAAP,KAAiBC,EAAjB,KACA,EAA8C7E,oBAAS,GAAvD,mBAAO8E,EAAP,KAAwBC,EAAxB,KACA,EAAkD/E,oBAAS,GAA3D,mBAAOgF,EAAP,KAA0BC,EAA1B,KACA,EAA0CjF,mBAAS,MAAnD,mBAAOkF,EAAP,KAAsBnF,EAAtB,KACA,EAAsBU,IAAKC,UAApByE,EAAP,oBACMC,EAAWC,cACTC,EAA+BC,YAAmBC,IAASJ,GAA3DE,2BAERlE,qBAAU,WACRqE,cAAmBvD,MAAK,SAACC,GACvB0C,EAAY1C,GACZgD,EAAY7D,eAAe,CACzByB,KAAMZ,EAAKuD,QAAQ3C,KACnB4C,UAAWxD,EAAKuD,QAAQC,UACxBC,QAASzD,EAAKuD,QAAQE,QACtBC,qBAAsB1D,EAAKuD,QAAQG,qBACnC5B,MAAO9B,EAAKuD,QAAQzB,QAEtB6B,YAAmBV,GAAUlD,MAAK,SAACC,GACjCpC,EAAiBoC,WAGpB,IAEHf,qBAAU,YAER2E,EADgCR,YAAmBC,IAASJ,GAApDW,qBACYb,KACnB,CAACA,IAEJ,IAgBMpF,EAAgB,SAACD,GACrB,IAAMmG,EAASd,EAAce,KAAI,SAACnD,GAChC,OAAIA,EAAKd,KAAOnC,EAAQmC,GAAWnC,EAC5BiD,KAET/C,EAAiBiG,IAGnB,OACE,kBAACE,EAAA,EAAD,CAAQ5D,UAAU,qBAChB,yBAAKA,UAAU,wBACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,0BACb,4BACE,uDACEwC,GACA,4BACEtC,QAAS,SAACV,GACRiD,GAAmB,KAErB,kBAAC,IAAD,SAMNH,EAGA,kBAAC,IAAD,CACE7B,KAAK,UACLU,KAAM0B,EAINzB,SAnDG,SAACD,GACdwB,GAAqB,GACrBkB,YAAgB1C,GAAMvB,MAAK,SAACC,GAC1B0C,EAAY1C,GACZ8C,GAAqB,GACrBF,GAAmB,QAiDX,wBAAIzC,UAAU,0BACZ,4BACE,yBAAKA,UAAU,SAAf,aACA,yBAAKA,UAAU,WACXwC,EAGA,kBAAC,IAAKlB,KAAN,CACEb,KAAK,OACLc,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,2BAEX,CACEqC,IAAK,IACLrC,QAAS,wDAGb,kBAAC,IAAD,OAdF,8BAAOa,EAASc,QAAQ3C,QAmB9B,4BACE,yBAAKT,UAAU,SAAf,QACA,yBAAKA,UAAU,WACXwC,EAoBA,kBAAC,IAAKlB,KAAN,CACEb,KAAK,YACLc,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,6BAGb,kBAAC,IAAD,OA3BF,oCACGa,EAASc,QAAQC,UAChB,8BAAOf,EAASc,QAAQC,WAExB,yBAAKrD,UAAU,SACb,kBAAC,IAAD,MACA,4CACA,uBACE+D,KAAK,GACL7D,QAAS,SAACV,GACRA,EAAEwE,iBACFvB,GAAmB,KAJvB,oBAyBZ,4BACE,yBAAKzC,UAAU,SAAf,sBACA,yBAAKA,UAAU,WACXwC,EAGA,kBAAC,IAAKlB,KAAN,CACEb,KAAK,UACLc,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,2CAGb,kBAAC,IAAD,OAVF,8BAAOa,EAASc,QAAQE,WAyB9B,4BACE,yBAAKtD,UAAU,SAAf,cACA,yBAAKA,UAAU,WACb,8BAAOsC,EAAS2B,SAMpB,4BACE,yBAAKjE,UAAU,SAAf,qBACA,yBAAKA,UAAU,WACXwC,EAGA,kBAAC,IAAKlB,KAAN,CACEb,KAAK,QACLc,MAAO,CACL,CACEC,UAAU,EACVC,QAAS,qCAGb,kBAAC,IAAD,OAVF,8BAAOa,EAASc,QAAQzB,SAe9B,4BACE,yBAAK3B,UAAU,SAAf,iBACA,yBAAKA,UAAU,WACb,kBAAC,IAAD,CAAMkE,GAAG,6BAAT,uBAnIR,kBAAC,IAAD,CAAUC,QAAM,IA0IjB3B,GACC,yBAAKxC,UAAU,4BACb,kBAAC,IAAD,CACEC,KAAK,SACLC,QAAS,SAACV,GACRiD,GAAmB,KAHvB,UAOA,kBAAC,IAAD,CACExC,KAAK,UACLG,QAASsC,EACTxC,QAAS,SAACV,GACRqD,EAAYT,WAJhB,WAYR,yBAAKpC,UAAU,sBACb,4BACE,8CACA,kBAAC,IAAD,CAAMkE,GAAG,wBAAwBhE,QAAS,kBAAM8C,EAA2B,QACzE,kBAAC,IAAD,QAGJ,wBAAIhD,UAAU,2BACX4C,GACCA,EAAce,KAAI,SAACnD,GAAD,OAChB,kBAAC,EAAD,CACE4D,IAAG,kBAAa5D,EAAKd,IACrBnC,QAASiD,EACThD,cAAeA,EACfC,iBAAkBA","file":"static/js/3.df419f7f.chunk.js","sourcesContent":["import lockr from 'lockr';\nconst { REACT_APP_API_URL } = process.env;\n\nexport const deleteCompany = async (companyId) => {\n  try {\n    const token = lockr.get('auth-key');\n\n    const deleteComp = await fetch(`${REACT_APP_API_URL}/profile/delete/company/${companyId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json',\n        Authorization: `Bearer ${token}`,\n      },\n    });\n    const res = await deleteComp.json();\n    if (res.success) return res;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import React, { useState, useEffect } from 'react';\nimport { Tooltip, Upload, Spin, Input, Form, Button, Dropdown, notification } from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { IconEditPencil, DeleteCompanySVG } from '../../../components/icons';\nimport iconUpload from '../../../assets/img/icon-upload.svg';\nimport { postCompanyData, postCompanyLogo } from '../../../core/services';\nimport { useSelector } from 'react-redux';\nimport { deleteCompany } from '../../../core/services/deleteCompany';\nimport './style.scss';\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 20 }} spin />;\n\nconst { Dragger } = Upload;\nconst Company = ({ company, updateCompany, setCompaniesList }) => {\n  const [companyLogo, setCompanyLogo] = useState(null);\n  const [editMode, setEditMode] = useState(false);\n  const [loader, setLoader] = useState(false);\n  const [logoLoader, setLogoLoader] = useState(false);\n  const [companyForm] = Form.useForm();\n  const companies = useSelector((state) => state.user.companies);\n  const [isDropDownDelete, setIsDropDownDelete] = useState(false);\n  const [loaderDelBtn, setLoaderDelBtn] = useState(false);\n\n  useEffect(() => {\n    let cleanupFunction = false;\n\n    companyForm.setFieldsValue({\n      number: company.number,\n      accountant_email: company.accountant_email,\n      revenue: company.revenue,\n      utr: company.utr,\n      sme_or_rdec: company.sme_or_rdec,\n    });\n    if (!cleanupFunction) setCompanyLogo(company.avatar);\n\n    return () => (cleanupFunction = true);\n  }, [company, companyForm]);\n\n  const onSave = (form) => {\n    setLoader(true);\n    postCompanyData(company.id, form).then((data) => {\n      setLoader(false);\n      setEditMode(false);\n      updateCompany(data);\n    });\n  };\n\n  const updateLogo = (e) => {\n    setLogoLoader(true);\n    postCompanyLogo(company.id, e.file).then((data) => {\n      setLogoLoader(false);\n      setCompanyLogo(data.avatar);\n    });\n    e.onSuccess('ok');\n  };\n\n  const deleteCompanyActions = () => {\n    setLoaderDelBtn(() => true);\n    deleteCompany(company?.id).then((data) => {\n      if (data.success) {\n        setLoaderDelBtn(() => true);\n        notification.success({\n          description: 'Company was deleted successfully',\n        });\n        setIsDropDownDelete((prev) => !prev);\n        setCompaniesList((prev) => prev.filter((item) => item.id !== company?.id));\n      }\n    });\n  };\n\n  const menu = (\n    <div className=\"wrapper_dropDown\">\n      <h4>Are you sure you want to delete this сompany? All the documents, claims will be deleted as well</h4>\n      <div className=\"dropDown__btn_container\">\n        <Button\n          type=\"button\"\n          onClick={() => {\n            setIsDropDownDelete((prev) => !prev);\n          }}>\n          Back\n        </Button>\n        <Button type=\"primary\" className=\"delete__red\" loading={loaderDelBtn} onClick={deleteCompanyActions}>\n          Delete\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <li className={`profile__company ${isDropDownDelete ? 'red_Company' : ''}`}>\n      <div className=\"profile__company_title\">\n        <h3>\n          <span>{company.name}</span>\n        </h3>\n        <div className=\"profile__wrapper_btn\" id=\"btn_del\">\n          {!editMode && (\n            <>\n              <button\n                className=\"profile__btn_mode\"\n                onClick={(e) => {\n                  setEditMode(true);\n                }}>\n                <IconEditPencil />\n              </button>\n              {companies.length !== 1 && (\n                <>\n                  <Dropdown\n                    overlay={menu}\n                    placement=\"bottomRight\"\n                    trigger=\"click\"\n                    visible={isDropDownDelete}\n                    onVisibleChange={() => {\n                      if (isDropDownDelete) setIsDropDownDelete((prev) => !prev);\n                    }}\n                    getPopupContainer={() => document.getElementById('btn_del')}>\n                    <button\n                      onClick={() => {\n                        setIsDropDownDelete((prev) => !prev);\n                      }}\n                      className=\"profile__btn_delete\">\n                      <DeleteCompanySVG />\n                    </button>\n                  </Dropdown>\n                </>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n      <Form form={companyForm} onFinish={onSave}>\n        <section className=\"profile__company_details\">\n          <div className=\"company--row\">\n            <div className=\"label\">Registered Number</div>\n            <div className=\"details\">\n              {!editMode ? (\n                <span>{company.number}</span>\n              ) : (\n                <Form.Item\n                  name=\"number\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input Company Number!',\n                    },\n                  ]}>\n                  <Input />\n                </Form.Item>\n              )}\n            </div>\n          </div>\n          <div className=\"company--row\">\n            <div className=\"label\">Accountant Email</div>\n            <div className=\"details\">\n              {!editMode ? (\n                <span>{company.accountant_email}</span>\n              ) : (\n                <Form.Item\n                  name=\"accountant_email\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input Company Email!',\n                    },\n                    {\n                      type: 'email',\n                      message: 'Please input valid Company Email!',\n                    },\n                  ]}>\n                  <Input />\n                </Form.Item>\n              )}\n            </div>\n          </div>\n          <div className=\"company--row\">\n            <div className=\"label\">Revenue</div>\n            <div className=\"details\">\n              {!editMode ? (\n                <span>{company.revenue}</span>\n              ) : (\n                <Form.Item\n                  name=\"revenue\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input Revenue!',\n                    },\n                  ]}>\n                  <Input />\n                </Form.Item>\n              )}\n            </div>\n          </div>\n          <div className=\"company--row\">\n            <div className=\"label\">UTR</div>\n            <div className=\"details\">\n              {!editMode ? (\n                <span>{company.utr}</span>\n              ) : (\n                <Form.Item\n                  name=\"utr\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input UTR!',\n                    },\n                  ]}>\n                  <Input />\n                </Form.Item>\n              )}\n            </div>\n          </div>\n          <div className=\"company--row\">\n            <div className=\"label\">SME or RDEC</div>\n            <div className=\"details\">\n              {!editMode ? (\n                <span>{company.sme_or_rdec}</span>\n              ) : (\n                <Form.Item\n                  name=\"sme_or_rdec\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input SME or RDEC!',\n                    },\n                  ]}>\n                  <Input />\n                </Form.Item>\n              )}\n            </div>\n          </div>\n          <div className=\"company--row\">\n            <div className=\"label\">Assigned Consultant</div>\n            <div className=\"details\">\n              {company.manager && (\n                <>\n                  <span className=\"manager\">{company.manager.name},</span>{' '}\n                  <span className=\"manager\">{company.manager.phone}</span>\n                </>\n              )}\n            </div>\n          </div>\n          <div className=\"company--row\">\n            <div className=\"label\">Company Logo</div>\n            <div className=\"details\">\n              {companyLogo ? (\n                <div className=\"company--logo\">\n                  <Dragger customRequest={updateLogo} showUploadList={false} accept=\"image/png, image/gif, image/jpeg\">\n                    {logoLoader && (\n                      <div className=\"upload-loading\">\n                        <Spin indicator={antIcon} />\n                      </div>\n                    )}\n                    <Tooltip placement=\"top\" title=\"Upload png or jpeg\">\n                      <img src={companyLogo} alt={companyLogo} />\n                    </Tooltip>\n                  </Dragger>\n                </div>\n              ) : (\n                <Dragger customRequest={updateLogo} showUploadList={false} accept=\"image/png, image/gif, image/jpeg\">\n                  {logoLoader && (\n                    <div className=\"upload-loading\">\n                      <Spin indicator={antIcon} />\n                    </div>\n                  )}\n                  <Tooltip placement=\"top\" title=\"Upload png or jpeg\">\n                    <div className=\"upload-title\">\n                      <img src={iconUpload} alt=\"\" />\n                      <span>Upload Logo</span>\n                    </div>\n                  </Tooltip>\n                </Dragger>\n              )}\n            </div>\n          </div>\n        </section>\n      </Form>\n      {editMode && (\n        <div className=\"profile__company_actions\">\n          <Button\n            type=\"button\"\n            loading={loader}\n            onClick={(e) => {\n              setEditMode(false);\n            }}>\n            Cancel\n          </Button>\n          <Button\n            type=\"primary\"\n            loading={loader}\n            onClick={(e) => {\n              companyForm.submit();\n            }}>\n            Save\n          </Button>\n        </div>\n      )}\n    </li>\n  );\n};\n\nexport default Company;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Skeleton, Input, Form, Button } from 'antd';\nimport { Link } from 'react-router-dom';\nimport Layout from '../../components/LayoutDashboard/Layout';\nimport Company from './Company';\nimport { fetchProfileData, postProfileData, fetchUserCompanies } from '../../core/services';\nimport { IconEditPencil, IconWarning, IconAdd } from '../../components/icons';\nimport './style.scss';\nimport actions from '../../core/actions';\nimport { bindActionCreators } from 'redux';\n\nconst ProfilePage = () => {\n  const [userData, setUserData] = useState(null);\n  const [editModeGeneral, setEditModeGeneral] = useState(false);\n  const [profileFormLoader, setProfileFormLoader] = useState(false);\n  const [companiesList, setCompaniesList] = useState(null);\n  const [profileForm] = Form.useForm();\n  const dispatch = useDispatch();\n  const { registrationChangeEstimate } = bindActionCreators(actions, dispatch);\n\n  useEffect(() => {\n    fetchProfileData().then((data) => {\n      setUserData(data);\n      profileForm.setFieldsValue({\n        name: data.profile.name,\n        team_role: data.profile.team_role,\n        address: data.profile.address,\n        enable_notifications: data.profile.enable_notifications,\n        phone: data.profile.phone,\n      });\n      fetchUserCompanies(dispatch).then((data) => {\n        setCompaniesList(data);\n      });\n    });\n  }, []);\n\n  useEffect(() => {\n    const { userCompaniesLoaded } = bindActionCreators(actions, dispatch);\n    userCompaniesLoaded(companiesList);\n  }, [companiesList]);\n\n  const onSave = (form) => {\n    setProfileFormLoader(true);\n    postProfileData(form).then((data) => {\n      setUserData(data);\n      setProfileFormLoader(false);\n      setEditModeGeneral(false);\n    });\n  };\n\n  //const enableNotificationsChange = (e) => {\n  //  const form = {\n  //    enable_notifications: e.target.checked ? 1 : 0,\n  //  };\n  //  postProfileData(form);\n  //};\n\n  const updateCompany = (company) => {\n    const result = companiesList.map((item) => {\n      if (item.id === company.id) return company;\n      return item;\n    });\n    setCompaniesList(result);\n  };\n\n  return (\n    <Layout className=\"dashboard profile\">\n      <div className=\"wrapp_profile_logOut\">\n        <div className=\"profile__general\">\n          <div className=\"profile__general_title\">\n            <h2>\n              <span>Personal Information</span>\n              {!editModeGeneral && (\n                <button\n                  onClick={(e) => {\n                    setEditModeGeneral(true);\n                  }}>\n                  <IconEditPencil />\n                </button>\n              )}\n            </h2>\n          </div>\n\n          {!userData ? (\n            <Skeleton active />\n          ) : (\n            <Form\n              name=\"profile\"\n              form={profileForm}\n              // initialValues={{\n              //   remember: true,\n              // }}\n              onFinish={onSave}\n              // onFinishFailed={onFinishFailed}\n            >\n              <ul className=\"profile__general_table\">\n                <li>\n                  <div className=\"label\">Full Name</div>\n                  <div className=\"details\">\n                    {!editModeGeneral ? (\n                      <span>{userData.profile.name}</span>\n                    ) : (\n                      <Form.Item\n                        name=\"name\"\n                        rules={[\n                          {\n                            required: true,\n                            message: 'Please input your name!',\n                          },\n                          {\n                            max: 255,\n                            message: 'Еhe permissible meaning of the symbols is 255',\n                          },\n                        ]}>\n                        <Input />\n                      </Form.Item>\n                    )}\n                  </div>\n                </li>\n                <li>\n                  <div className=\"label\">Role</div>\n                  <div className=\"details\">\n                    {!editModeGeneral ? (\n                      <>\n                        {userData.profile.team_role ? (\n                          <span>{userData.profile.team_role}</span>\n                        ) : (\n                          <div className=\"alert\">\n                            <IconWarning />\n                            <span>Not Setted</span>\n                            <a\n                              href=\"\"\n                              onClick={(e) => {\n                                e.preventDefault();\n                                setEditModeGeneral(true);\n                              }}>\n                              Set the Role\n                            </a>\n                          </div>\n                        )}\n                      </>\n                    ) : (\n                      <Form.Item\n                        name=\"team_role\"\n                        rules={[\n                          {\n                            required: true,\n                            message: 'Please input your Role!',\n                          },\n                        ]}>\n                        <Input />\n                      </Form.Item>\n                    )}\n                  </div>\n                </li>\n                <li>\n                  <div className=\"label\">Registered Address</div>\n                  <div className=\"details\">\n                    {!editModeGeneral ? (\n                      <span>{userData.profile.address}</span>\n                    ) : (\n                      <Form.Item\n                        name=\"address\"\n                        rules={[\n                          {\n                            required: true,\n                            message: 'Please input your Registered Address!',\n                          },\n                        ]}>\n                        <Input />\n                      </Form.Item>\n                    )}\n                  </div>\n                </li>\n                {/* <li>\n                <div className=\"label\">ID Verification status</div>\n                <div className=\"details\">\n                  <div className=\"alert\">\n                    <IconWarning />\n                    <span>Not Verified</span>\n                    <a href=\"\">Verify</a>\n                  </div>\n                </div>\n              </li> */}\n                <li>\n                  <div className=\"label\">Your Email</div>\n                  <div className=\"details\">\n                    <span>{userData.email}</span>\n                    {/* <Form.Item name=\"enable_notifications\" valuePropName=\"checked\">\n                      <Checkbox onChange={enableNotificationsChange}>Receive all notifications</Checkbox>\n                    </Form.Item> */}\n                  </div>\n                </li>\n                <li>\n                  <div className=\"label\">Your Phone Number</div>\n                  <div className=\"details\">\n                    {!editModeGeneral ? (\n                      <span>{userData.profile.phone}</span>\n                    ) : (\n                      <Form.Item\n                        name=\"phone\"\n                        rules={[\n                          {\n                            required: true,\n                            message: 'Please input your Phone Number!',\n                          },\n                        ]}>\n                        <Input />\n                      </Form.Item>\n                    )}\n                  </div>\n                </li>\n                <li>\n                  <div className=\"label\">Your Password</div>\n                  <div className=\"details\">\n                    <Link to=\"/profile/change-password/\">Change password</Link>\n                  </div>\n                </li>\n              </ul>\n            </Form>\n          )}\n\n          {editModeGeneral && (\n            <div className=\"profile__general_actions\">\n              <Button\n                type=\"button\"\n                onClick={(e) => {\n                  setEditModeGeneral(false);\n                }}>\n                Cancel\n              </Button>\n              <Button\n                type=\"primary\"\n                loading={profileFormLoader}\n                onClick={(e) => {\n                  profileForm.submit();\n                }}>\n                Save\n              </Button>\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"profile__companies\">\n        <h2>\n          <span>My Companies</span>\n          <Link to=\"/profile/add-project/\" onClick={() => registrationChangeEstimate(null)}>\n            <IconAdd />\n          </Link>\n        </h2>\n        <ul className=\"profile__companies_list\">\n          {companiesList &&\n            companiesList.map((item) => (\n              <Company\n                key={`company-${item.id}`}\n                company={item}\n                updateCompany={updateCompany}\n                setCompaniesList={setCompaniesList}\n              />\n            ))}\n        </ul>\n      </div>\n    </Layout>\n  );\n};\n\nexport default ProfilePage;\n"],"sourceRoot":""}